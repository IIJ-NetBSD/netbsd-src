.\"	$NetBSD: strlcpy.3,v 1.25 2025/04/02 00:50:19 gutteridge Exp $
.\" from OpenBSD: strlcpy.3,v 1.11 2000/11/16 23:27:41 angelos Exp
.\"
.\" Copyright (c) 1998, 2000 Todd C. Miller <Todd.Miller@courtesan.com>
.\" All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. The name of the author may not be used to endorse or promote products
.\"    derived from this software without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,
.\" INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
.\" AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL
.\" THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
.\" EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
.\" PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
.\" OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
.\" WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
.\" OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
.\" ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
.\"
.Dd March 30, 2025
.Dt STRLCPY 3
.Os
.Sh NAME
.Nm strlcpy ,
.Nm strlcat
.Nd size-bounded string copying and concatenation
.Sh LIBRARY
.Lb libc
.Sh SYNOPSIS
.In string.h
.Ft size_t
.Fn strlcpy "char *dst" "const char *src" "size_t size"
.Ft size_t
.Fn strlcat "char *dst" "const char *src" "size_t size"
.Sh DESCRIPTION
The
.Fn strlcpy
and
.Fn strlcat
functions copy and concatenate
.Tn NUL Ns -terminated
strings respectively.
.Pp
The
.Fn strlcpy
function computes the length
.Pq like Xr strlen 3
of
.Fa src ,
which
.Em MUST
be
.Tn NUL Ns -terminated ,
and copies up to
.Fa size Li "- 1"
bytes from
.Fa src
to
.Fa dst ,
.Tn NUL Ns -terminating
the result.
.Pp
If the bytes
.Fa dst Ns Li "[0]" ,
.Fa dst Ns Li "[1]" ,
\&...,
.Fa dst Ns Li "[" Ns Fa size Li - 1 Ns Li "]"
are all
.No non- Ns Tn NUL ,
then the
.Fn strlcat
function returns
.Fa size + Fn strlen src
without writing anything to
.Fa dst .
.Pp
Otherwise, the
.Fn strlcat
function computes the sum of the lengths of
.Fa dst
and
.Fa src ,
which
.Em MUST
be
.Tn NUL Ns -terminated ,
and copies the content of
.Fa src
to the position of the first
.Tn NUL
byte in
.Fa dst ,
.Tn NUL Ns -terminating
the result.
.Fn strlcat
will append at most
.Fa size Li "-" Fn strlen dst Li "- 1"
.No non- Ns Tn NUL
bytes from
.Fa src ,
followed by one
.Ns NUL
byte.
.Ss Relation to Xr strncpy 3 and Xr strncat 3
Unlike
.Xr strncpy 3 ,
.Fn strlcpy
is guaranteed to
.Tn NUL Ns -terminate
the result (as long as
.Fa size
is larger than 0).
Note that you should include a byte for the
.Tn NUL
in
.Fa size .
.Pp
Unlike
.Xr strncat 3 ,
.Fn strlcat
is guaranteed to
.Tn NUL Ns -terminate
the result if
.Fa dst
is
.Tn NUL Ns -terminated
to begin with.
.Pp
.Sy WARNING :
.Fn strlcpy
and
.Fn strlcat
are not guaranteed to initialize all
.Fa size
bytes of
.Fa dst
\(em
.Fn strlcpy
leaves bytes past
.Fa dst Ns Li "[" Fn strlen src Li "+ 1" Ns Li "]"
uninitialized, and
.Fn strlcat
leaves bytes past
.Fa dst Ns Li "[" Fn strlen dst Li + Fn strlen src Li + 1 Ns Li "]"
uninitialized.
This can lead to security vulnerabilities such as leaking secrets from
uninitialized stack or heap buffers.
You
.Em MUST NOT
simply replace
.Xr strncpy 3
and
.Xr strncat 3
by
.Fn strlcpy
and
.Fn strlcat
without proving it is safe to leave some of the output uninitialized.
.Pp
.Sy WARNING :
.Fn strlcat
does not guarantee to
.Tn NUL Ns -terminate
.Fa dst
even if there is space for it.
In particular, if
.Fa dst
is not
.Tn NUL Ns -terminated
on entry, then
.Fn strlcat
will leave it without a
.Tn NUL Ns -terminator
on return.
.Pp
.Sy WARNING :
The
.Fa src
argument
.Em MUST
be
.Tn NUL Ns -terminated .
Both
.Fn strlcpy
and
.Fn strlcat
will read through
.Fa src
until they find a
.Tn NUL
terminator, reading
.Fa src Ns Li "[" Ns Fa size Ns Li "]" Ns ,
.Fa src Ns Li "[" Ns Fa size Li + 1 Ns Li "]" Ns ,
.Fa src Ns Li "[" Ns Fa size Li + 2 Ns Li "]" Ns ,
and beyond if there was no earlier
.Tn NUL
terminator.
Applications handling fixed-width fields with
.Pq possibly empty
.Tn NUL
padding, instead of
.Tn NUL Ns -terminated
C strings,
.Em MUST
use
.Xr strncpy 3
and
.Xr strncat 3
instead.
Attempting to use
.Fn strlcpy
or
.Fn strlcat
for these cases can lead to crashes or security vulnerabilities from
buffer overruns.
.Sh RETURN VALUES
The
.Fn strlcpy
and
.Fn strlcat
functions return the total length of the string they tried to create.
For
.Fn strlcpy
that means the length of
.Fa src .
For
.Fn strlcat
that means the initial length of
.Fa dst
plus
the length of
.Fa src .
While this may seem somewhat confusing it was done to make
truncation detection simple.
.Pp
Note however, that if
.Fn strlcat
traverses
.Fa size
bytes without finding a
.Tn NUL ,
the length of the string is considered to be
.Fa size
and the destination string will not be
.Tn NUL Ns -terminated
.Pq since there was no space for the Tn NUL .
This keeps
.Fn strlcat
from running off the end of a string.
In practice this should not happen (as it means that either
.Fa size
is incorrect or that
.Fa dst
is not a proper
.Dq C
string).
The check exists to prevent potential security problems in incorrect code.
.Sh EXAMPLES
The following code fragment illustrates the simple case:
.Bd -literal -offset indent
char *s, *p, buf[BUFSIZ];

\&...

strlcpy(buf, s, sizeof(buf));
strlcat(buf, p, sizeof(buf));
.Ed
.Pp
To detect truncation, perhaps while building a pathname, something
like the following might be used:
.Bd -literal -offset indent
char *dir, *file, pname[MAXPATHLEN];

\&...

if (strlcpy(pname, dir, sizeof(pname)) >= sizeof(pname))
	goto toolong;
if (strlcat(pname, file, sizeof(pname)) >= sizeof(pname))
	goto toolong;
.Ed
.Pp
Since we know how many bytes we copied the first time, we can
speed things up a bit by using a copy instead of an append:
.Bd -literal -offset indent
char *dir, *file, pname[MAXPATHLEN];
size_t n;

\&...

n = strlcpy(pname, dir, sizeof(pname));
if (n >= sizeof(pname))
	goto toolong;
if (strlcpy(pname + n, file, sizeof(pname) - n) >= sizeof(pname) - n)
	goto toolong;
.Ed
.Pp
However, one may question the validity of such optimizations, as they
defeat the whole purpose of
.Fn strlcpy
and
.Fn strlcat .
.Sh SEE ALSO
.Xr snprintf 3 ,
.Xr strncat 3 ,
.Xr strncpy 3
.Rs
.%A Todd C. Miller
.%A Theo de Raadt
.%T strlcpy and strlcat -- Consistent, Safe, String Copy and Concatenation
.%I USENIX Association
.%B Proceedings of the FREENIX Track: 1999 USENIX Annual Technical Conference
.%D June 6-11, 1999
.%U http://www.usenix.org/publications/library/proceedings/usenix99/full_papers/millert/millert.pdf
.Re
.Sh STANDARDS
The
.Fn strlcpy
and
.Fn strlcat
functions conform to
.St -p1003.1-2024 .
.Sh HISTORY
The
.Fn strlcpy
and
.Fn strlcat
functions first appeared in
.Ox 2.4 ,
then in
.Nx 1.4.3
and
.Fx 3.3 .
