#! /bin/sh
# $OpenLDAP$
## This work is part of OpenLDAP Software <http://www.openldap.org/>.
##
## Copyright 1998-2024 The OpenLDAP Foundation.
## All rights reserved.
##
## Redistribution and use in source and binary forms, with or without
## modification, are permitted only as authorized by the OpenLDAP
## Public License.
##
## A copy of this license is available in the file LICENSE in the
## top-level directory of the distribution or, alternatively, at
## <http://www.OpenLDAP.org/license.html>.

echo "running defines.sh"
. $SRCDIR/scripts/defines.sh

if test $BACKLDAP = ldapno; then 
	echo "LDAP backend not available, test skipped"
	exit 0
fi 

if test $SYNCPROV = syncprovno; then 
	echo "Syncrepl provider overlay not available, test skipped"
	exit 0
fi 

mkdir -p $TESTDIR $DBDIR1 $DBDIR2 $DBDIR3

#
# Test replication:
# - start provider
# - start consumer
# - populate over ldap
# - perform some modifies and deleted
# - attempt to modify the consumer (referral or chain)
# - retrieve database over ldap and compare against expected results
#

echo "Starting provider slapd on TCP/IP port $PORT1..."
. $CONFFILTER $BACKEND < $PLSRPROVIDERCONF > $CONF1
$SLAPD -f $CONF1 -h $URI1 -d $LVL > $LOG1 2>&1 &
PROVIDERPID=$!
if test $WAIT != 0 ; then
    echo PROVIDERPID $PROVIDERPID
    read foo
fi
KILLPIDS="$PROVIDERPID"

sleep 1

echo "Using ldapsearch to check that provider slapd is running..."
for i in 0 1 2 3 4 5; do
	$LDAPSEARCH -s base -b "$MONITOR" -H $URI1 \
		'(objectClass=*)' > /dev/null 2>&1
	RC=$?
	if test $RC = 0 ; then
		break
	fi
	echo "Waiting 5 seconds for slapd to start..."
	sleep 5
done

if test $RC != 0 ; then
	echo "ldapsearch failed ($RC)!"
	test $KILLSERVERS != no && kill -HUP $KILLPIDS
	exit $RC
fi

echo "Using ldapadd to create the context prefix entry in the provider..."
$LDAPADD -D "$MANAGERDN" -H $URI1 -w $PASSWD < \
	$LDIFORDEREDCP > /dev/null 2>&1
RC=$?
if test $RC != 0 ; then
	echo "ldapadd failed ($RC)!"
	test $KILLSERVERS != no && kill -HUP $KILLPIDS
	exit $RC
fi

echo "Starting P1 consumer slapd on TCP/IP port $PORT2..."
. $CONFFILTER $BACKEND < $RCONSUMERCONF > $CONF2
$SLAPD -f $CONF2 -h $URI2 -d $LVL > $LOG2 2>&1 &
P1CONSUMERPID=$!
if test $WAIT != 0 ; then
    echo P1CONSUMERPID $P1CONSUMERPID
    read foo
fi
KILLPIDS="$PROVIDERPID $P1CONSUMERPID"

sleep 1

echo "Using ldapsearch to check that P1 consumer slapd is running..."
for i in 0 1 2 3 4 5; do
	$LDAPSEARCH -s base -b "$MONITOR" -H $URI2 \
		'(objectClass=*)' > /dev/null 2>&1
	RC=$?
	if test $RC = 0 ; then
		break
	fi
	echo "Waiting 5 seconds for slapd to start..."
	sleep 5
done

if test $RC != 0 ; then
	echo "ldapsearch failed ($RC)!"
	test $KILLSERVERS != no && kill -HUP $KILLPIDS
	exit $RC
fi

echo "Starting R1 consumer slapd on TCP/IP port $PORT3..."
. $CONFFILTER $BACKEND < $RCONSUMERCONF | sed -e 's;\.2\.\([^/]*\)$;.3.\1;' > $CONF3
$SLAPD -f $CONF3 -h $URI3 -d $LVL > $LOG3 2>&1 &
R1CONSUMERPID=$!
if test $WAIT != 0 ; then
    echo R1CONSUMERPID $R1CONSUMERPID
    read foo
fi
KILLPIDS="$PROVIDERPID $P1CONSUMERPID $R1CONSUMERPID"

sleep 1

echo "Using ldapsearch to check that R1 consumer slapd is running..."
for i in 0 1 2 3 4 5; do
	$LDAPSEARCH -s base -b "$MONITOR" -H $URI3 \
		'(objectClass=*)' > /dev/null 2>&1
	RC=$?
	if test $RC = 0; then
		break
	fi
	echo "Waiting 5 seconds for slapd to start..."
	sleep 5
done

if test $RC != 0 ; then
	echo "ldapsearch failed ($RC)!"
	test $KILLSERVERS != no && kill -HUP $KILLPIDS
	exit $RC
fi

CHECK=1
echo "$CHECK > Using ldapadd to populate the provider directory..."
$LDAPADD -D "$MANAGERDN" -H $URI1 -w $PASSWD < \
	$LDIFORDEREDNOCP > /dev/null 2>&1
RC=$?
if test $RC != 0 ; then
	echo "ldapadd failed ($RC)!"
	test $KILLSERVERS != no && kill -HUP $KILLPIDS
	exit $RC
fi

echo "Waiting $SLEEP1 seconds for syncrepl to receive changes..."
sleep $SLEEP1

#echo "Using ldapsearch to read all the entries from the provider..."
$LDAPSEARCH -S "" -b "$BASEDN" -H $URI1 \
	'(objectClass=*)' > "${PROVIDEROUT}.1" 2>&1
RC=$?

if test $RC != 0 ; then
	echo "ldapsearch failed at provider ($RC)!"
	test $KILLSERVERS != no && kill -HUP $KILLPIDS
	exit $RC
fi

#echo "Using ldapsearch to read all the entries from the P1 consumer..."
$LDAPSEARCH -S "" -b "$BASEDN" -H $URI2 \
	'(objectClass=*)' > "${CONSUMEROUT}.1" 2>&1
RC=$?

if test $RC != 0 ; then
	echo "ldapsearch failed at P1 consumer ($RC)!"
	test $KILLSERVERS != no && kill -HUP $KILLPIDS
	exit $RC
fi

#echo "Filtering provider results..."
$LDIFFILTER < "${PROVIDEROUT}.1" > $PROVIDERFLT
#echo "Filtering consumer results..."
$LDIFFILTER < "${CONSUMEROUT}.1" > $CONSUMERFLT

echo "$CHECK < Comparing retrieved entries from provider and P1 consumer..."
$CMP $PROVIDERFLT $CONSUMERFLT > $CMPOUT

if test $? != 0 ; then
	echo "test failed - provider and P1 consumer databases differ"
	test $KILLSERVERS != no && kill -HUP $KILLPIDS
	exit 1
fi

#echo "Using ldapsearch to read all the entries from the R1 consumer..."
$LDAPSEARCH -S "" -b "$BASEDN" -H $URI3 \
	'(objectClass=*)' > "${CONSUMEROUT}.1" 2>&1
RC=$?

if test $RC != 0 ; then
	echo "ldapsearch failed at R1 consumer ($RC)!"
	test $KILLSERVERS != no && kill -HUP $KILLPIDS
	exit $RC
fi

#echo "Filtering consumer results..."
$LDIFFILTER < "${CONSUMEROUT}.1" > $CONSUMERFLT

echo "$CHECK < Comparing retrieved entries from provider and R1 consumer..."
$CMP $PROVIDERFLT $CONSUMERFLT > $CMPOUT

if test $? != 0 ; then
	echo "test failed - provider and R1 consumer databases differ"
	test $KILLSERVERS != no && kill -HUP $KILLPIDS
	exit 1
fi

CHECK=`expr $CHECK + 1`
echo "$CHECK > Stopping the provider, sleeping $SLEEP2 seconds and restarting it..."
kill -HUP "$PROVIDERPID"
wait $PROVIDERPID
sleep $SLEEP2

echo "======================= RESTART =======================" >> $LOG1
$SLAPD -f $CONF1 -h $URI1 -d $LVL >> $LOG1 2>&1 &
PROVIDERPID=$!
if test $WAIT != 0 ; then
    echo PROVIDERPID $PROVIDERPID
    read foo
fi
KILLPIDS="$PROVIDERPID $P1CONSUMERPID $R1CONSUMERPID"

sleep 1

echo "Using ldapsearch to check that provider slapd is running..."
for i in 0 1 2 3 4 5; do
	$LDAPSEARCH -s base -b "$MONITOR" -H $URI1 \
		'(objectClass=*)' > /dev/null 2>&1
	RC=$?
	if test $RC = 0 ; then
		break
	fi
	echo "Waiting 5 seconds for slapd to start..."
	sleep 5
done

if test $RC != 0 ; then
	echo "ldapsearch failed ($RC)!"
	test $KILLSERVERS != no && kill -HUP $KILLPIDS
	exit $RC
fi

echo "Using ldapmodify to modify provider directory..."

#
# Do some modifications
#

$LDAPMODIFY -v -D "$MANAGERDN" -H $URI1 -w $PASSWD > \
	$TESTOUT 2>&1 << EOMODS
dn: cn=James A Jones 1, ou=Alumni Association, ou=People, dc=example,dc=com
changetype: modify
add: drink
drink: Orange Juice
-
delete: sn
sn: Jones
-
add: sn
sn: Jones

dn: cn=Bjorn Jensen, ou=Information Technology Division, ou=People, dc=example,dc=com
changetype: modify
replace: drink
drink: Iced Tea

dn: cn=ITD Staff,ou=Groups,dc=example,dc=com
changetype: modify
delete: uniquemember
uniquemember: cn=James A Jones 2, ou=Information Technology Division, ou=People, dc=example,dc=com
uniquemember: cn=Bjorn Jensen, ou=Information Technology Division, ou=People, dc=example,dc=com
-
add: uniquemember
uniquemember: cn=Dorothy Stevens, ou=Alumni Association, ou=People, dc=example,dc=com
uniquemember: cn=James A Jones 1, ou=Alumni Association, ou=People, dc=example,dc=com

dn: cn=Bjorn Jensen,ou=Information Technology Division,ou=People,dc=example,dc
 =com
changetype: modify
delete: cn
cn: Biiff Jensen

dn: cn=Gern Jensen, ou=Information Technology Division, ou=People, dc=example,dc=com
changetype: add
objectclass: OpenLDAPperson
cn: Gern Jensen
sn: Jensen
uid: gjensen
title: Chief Investigator, ITD
postaladdress: ITD $ 535 W. William St $ Ann Arbor, MI 48103
seealso: cn=All Staff, ou=Groups, dc=example,dc=com
drink: Coffee
homepostaladdress: 844 Brown St. Apt. 4 $ Ann Arbor, MI 48104
description: Very odd
facsimiletelephonenumber: +1 313 555 7557
telephonenumber: +1 313 555 8343
mail: gjensen@mailgw.example.com
homephone: +1 313 555 8844

dn: ou=Retired, ou=People, dc=example,dc=com
changetype: add
objectclass: organizationalUnit
ou: Retired

dn: cn=Rosco P. Coltrane, ou=Information Technology Division, ou=People, dc=example,dc=com
changetype: add
objectclass: OpenLDAPperson
cn: Rosco P. Coltrane
sn: Coltrane
uid: rosco
description: Fat tycoon

dn: cn=Rosco P. Coltrane, ou=Information Technology Division, ou=People, dc=example,dc=com
changetype: modrdn
newrdn: cn=Rosco P. Coltrane
deleteoldrdn: 1
newsuperior: ou=Retired, ou=People, dc=example,dc=com

dn: cn=James A Jones 2, ou=Information Technology Division, ou=People, dc=example,dc=com
changetype: delete
EOMODS

RC=$?
if test $RC != 0 ; then
	echo "ldapmodify failed ($RC)!"
	test $KILLSERVERS != no && kill -HUP $KILLPIDS
	exit $RC
fi

echo "Waiting $SLEEP1 seconds for syncrepl to receive changes..."
sleep $SLEEP1

#echo "Using ldapsearch to read all the entries from the provider..."
$LDAPSEARCH -S "" -b "$BASEDN" -H $URI1 \
	'(objectClass=*)' > "${PROVIDEROUT}.2" 2>&1
RC=$?

if test $RC != 0 ; then
	echo "ldapsearch failed at provider ($RC)!"
	test $KILLSERVERS != no && kill -HUP $KILLPIDS
	exit $RC
fi

#echo "Using ldapsearch to read all the entries from the P1 consumer..."
$LDAPSEARCH -S "" -b "$BASEDN" -H $URI2 \
	'(objectClass=*)' > "${CONSUMEROUT}.2" 2>&1
RC=$?

if test $RC != 0 ; then
	echo "ldapsearch failed at P1 consumer ($RC)!"
	test $KILLSERVERS != no && kill -HUP $KILLPIDS
	exit $RC
fi

#echo "Filtering provider results..."
$LDIFFILTER < "${PROVIDEROUT}.2" > $PROVIDERFLT
#echo "Filtering P1 consumer results..."
$LDIFFILTER < "${CONSUMEROUT}.2" > $CONSUMERFLT

echo "$CHECK < Comparing retrieved entries from provider and P1 consumer..."
$CMP $PROVIDERFLT $CONSUMERFLT > $CMPOUT

if test $? != 0 ; then
	echo "test failed - provider and P1 consumer databases differ"
	test $KILLSERVERS != no && kill -HUP $KILLPIDS
	exit 1
fi

#echo "Using ldapsearch to read all the entries from the R1 consumer..."
$LDAPSEARCH -S "" -b "$BASEDN" -H $URI3 \
	'(objectClass=*)' > "${CONSUMEROUT}.2" 2>&1
RC=$?

if test $RC != 0 ; then
	echo "ldapsearch failed at R1 consumer ($RC)!"
	test $KILLSERVERS != no && kill -HUP $KILLPIDS
	exit $RC
fi

#echo "Filtering consumer results..."
$LDIFFILTER < "${CONSUMEROUT}.2" > $CONSUMERFLT

echo "$CHECK < Comparing retrieved entries from provider and R1 consumer..."
$CMP $PROVIDERFLT $CONSUMERFLT > $CMPOUT

if test $? != 0 ; then
	echo "test failed - provider and R1 consumer databases differ"
	test $KILLSERVERS != no && kill -HUP $KILLPIDS
	exit 1
fi

CHECK=`expr $CHECK + 1`
echo "$CHECK > Stopping consumer to test recovery..."
kill -HUP $P1CONSUMERPID $R1CONSUMERPID
wait $P1CONSUMERPID
wait $R1CONSUMERPID

echo "Modifying more entries on the provider..."
$LDAPMODIFY -v -D "$MANAGERDN" -H $URI1 -w $PASSWD >> \
	$TESTOUT 2>&1 << EOMODS
dn: cn=Bjorn Jensen, ou=Information Technology Division, ou=People, dc=example,dc=com
changetype: modify
add: description
description: r1 consumer is down...

dn: cn=James T. Kirk, ou=Retired, ou=People, dc=example,dc=com
changetype: add
objectclass: OpenLDAPperson
sn: Kirk
uid: jtk
cn: James T. Kirk

dn: cn=Tiberius J. Hooker, ou=Retired, ou=People, dc=example,dc=com
changetype: add
objectclass: OpenLDAPperson
sn: Hooker
uid: tjh
cn: Tiberius J. Hooker

EOMODS

echo "Restarting P1 consumer..."
echo "======================= RESTART =======================" >> $LOG3
$SLAPD -f $CONF2 -h $URI2 -d $LVL >> $LOG2 2>&1 &
P1CONSUMERPID=$!
if test $WAIT != 0 ; then
    echo P1CONSUMERPID $P1CONSUMERPID
    read foo
fi

echo "Restarting R1 consumer..."
echo "======================= RESTART =======================" >> $LOG3
$SLAPD -f $CONF3 -h $URI3 -d $LVL >> $LOG3 2>&1 &
R1CONSUMERPID=$!
if test $WAIT != 0 ; then
    echo R1CONSUMERPID $R1CONSUMERPID
    read foo
fi
KILLPIDS="$PROVIDERPID $P1CONSUMERPID $R1CONSUMERPID"

echo "Waiting $SLEEP2 seconds for syncrepl to receive changes..."
sleep $SLEEP2

#echo "Using ldapsearch to read all the entries from the provider..."
$LDAPSEARCH -S "" -b "$BASEDN" -H $URI1 \
	'(objectClass=*)' > "${PROVIDEROUT}.3" 2>&1
RC=$?

if test $RC != 0 ; then
	echo "ldapsearch failed at provider ($RC)!"
	test $KILLSERVERS != no && kill -HUP $KILLPIDS
	exit $RC
fi

#echo "Using ldapsearch to read all the entries from the P1 consumer..."
$LDAPSEARCH -S "" -b "$BASEDN" -H $URI2 \
	'(objectClass=*)' > "${CONSUMEROUT}.3" 2>&1
RC=$?

if test $RC != 0 ; then
	echo "ldapsearch failed at consumer ($RC)!"
	test $KILLSERVERS != no && kill -HUP $KILLPIDS
	exit $RC
fi

#echo "Filtering provider results..."
$LDIFFILTER < "${PROVIDEROUT}.3" > $PROVIDERFLT
#echo "Filtering consumer results..."
$LDIFFILTER < "${CONSUMEROUT}.3" > $CONSUMERFLT

echo "$CHECK < Comparing retrieved entries from provider and P1 consumer..."
$CMP $PROVIDERFLT $CONSUMERFLT > $CMPOUT

if test $? != 0 ; then
	echo "test failed - provider and consumer databases differ"
	test $KILLSERVERS != no && kill -HUP $KILLPIDS
	exit 1
fi

#echo "Using ldapsearch to read all the entries from the R1 consumer..."
$LDAPSEARCH -S "" -b "$BASEDN" -H $URI3 \
	'(objectClass=*)' > "${CONSUMEROUT}.3" 2>&1
RC=$?

if test $RC != 0 ; then
	echo "ldapsearch failed at consumer ($RC)!"
	test $KILLSERVERS != no && kill -HUP $KILLPIDS
	exit $RC
fi

#echo "Filtering consumer results..."
$LDIFFILTER < "${CONSUMEROUT}.3" > $CONSUMERFLT

echo "$CHECK < Comparing retrieved entries from provider and R1 consumer..."
$CMP $PROVIDERFLT $CONSUMERFLT > $CMPOUT

if test $? != 0 ; then
	echo "test failed - provider and consumer databases differ"
	test $KILLSERVERS != no && kill -HUP $KILLPIDS
	exit 1
fi

CHECK=`expr $CHECK + 1`
echo "$CHECK > Try updating the P1 consumer slapd..."
$LDAPMODIFY -v -D "$MANAGERDN" -H $URI2 -w $PASSWD > \
	$TESTOUT 2>&1 << EOMODS
dn: cn=James A Jones 1, ou=Alumni Association, ou=People, dc=example, dc=com
changetype: modify
add: description
description: This write must fail because directed to a shadow context,
description: unless the chain overlay is configured appropriately ;)

EOMODS

RC=$?
if test $RC != 0 ; then
	echo "ldapmodify failed ($RC)!"
	test $KILLSERVERS != no && kill -HUP $KILLPIDS
	exit $RC
fi

echo "Waiting $SLEEP1 seconds for syncrepl to receive changes..."
sleep $SLEEP1

#echo "Using ldapsearch to read all the entries from the provider..."
$LDAPSEARCH -S "" -b "$BASEDN" -H $URI1 \
	'(objectClass=*)' > "${PROVIDEROUT}.4" 2>&1
RC=$?

if test $RC != 0 ; then
	echo "ldapsearch failed at provider ($RC)!"
	test $KILLSERVERS != no && kill -HUP $KILLPIDS
	exit $RC
fi

#echo "Using ldapsearch to read all the entries from the P1 consumer..."
$LDAPSEARCH -S "" -b "$BASEDN" -H $URI2 \
'(objectClass=*)' > "${CONSUMEROUT}.4" 2>&1
RC=$?

if test $RC != 0 ; then
	echo "ldapsearch failed at consumer ($RC)!"
	test $KILLSERVERS != no && kill -HUP $KILLPIDS
	exit $RC
fi

#echo "Filtering provider results..."
$LDIFFILTER < "${PROVIDEROUT}.4" > $PROVIDERFLT
#echo "Filtering consumer results..."
$LDIFFILTER < "${CONSUMEROUT}.4" > $CONSUMERFLT

echo "$CHECK < Comparing retrieved entries from provider and P1 consumer..."
$CMP $PROVIDERFLT $CONSUMERFLT > $CMPOUT

if test $? != 0 ; then
	echo "test failed - provider and P1 consumer databases differ"
	test $KILLSERVERS != no && kill -HUP $KILLPIDS
	exit 1
fi

#echo "Using ldapsearch to read all the entries from the R1 consumer..."
$LDAPSEARCH -S "" -b "$BASEDN" -H $URI3 \
'(objectClass=*)' > "${CONSUMEROUT}.4" 2>&1
RC=$?

if test $RC != 0 ; then
	echo "ldapsearch failed at consumer ($RC)!"
	test $KILLSERVERS != no && kill -HUP $KILLPIDS
	exit $RC
fi

#echo "Filtering consumer results..."
$LDIFFILTER < "${CONSUMEROUT}.4" > $CONSUMERFLT

echo "$CHECK < Comparing retrieved entries from provider and R1 consumer..."
$CMP $PROVIDERFLT $CONSUMERFLT > $CMPOUT

if test $? != 0 ; then
	echo "test failed - provider and R1 consumer databases differ"
	test $KILLSERVERS != no && kill -HUP $KILLPIDS
	exit 1
fi

test $KILLSERVERS != no && kill -HUP $KILLPIDS

echo ">>>>> Test succeeded"

test $KILLSERVERS != no && wait

exit 0
