#! /bin/sh
# $OpenLDAP$
## This work is part of OpenLDAP Software <http://www.openldap.org/>.
##
## Copyright 1998-2024 The OpenLDAP Foundation.
## All rights reserved.
##
## Redistribution and use in source and binary forms, with or without
## modification, are permitted only as authorized by the OpenLDAP
## Public License.
##
## A copy of this license is available in the file LICENSE in the
## top-level directory of the distribution or, alternatively, at
## <http://www.OpenLDAP.org/license.html>.

echo "running defines.sh"
. $SRCDIR/scripts/defines.sh

if test $SYNCPROV = syncprovno; then 
	echo "Syncrepl provider overlay not available, test skipped"
	exit 0
fi 

mkdir -p $TESTDIR $DBDIR1 $DBDIR2 $DBDIR3 $DBDIR4 $DBDIR5 $DBDIR6

#
# Test replication:
# - start provider
# - start consumer
# - populate over ldap
# - perform some modifies and deleted
# - retrieve database over ldap and compare against expected results
#

echo "Starting provider slapd on TCP/IP port $PORT1..."
. $CONFFILTER $BACKEND < $SRPROVIDERCONF > $CONF1
$SLAPD -f $CONF1 -h $URI1 -d $LVL > $LOG1 2>&1 &
PID=$!
if test $WAIT != 0 ; then
    echo PID $PID
    read foo
fi
KILLPIDS="$PID"

sleep 1

echo "Using ldapsearch to check that provider slapd (pid=$PID) is running..."
for i in 0 1 2 3 4 5; do
	$LDAPSEARCH -s base -b "$MONITOR" -H $URI1 \
		'objectclass=*' > /dev/null 2>&1
	RC=$?
	if test $RC = 0 ; then
		break
	fi
	echo "Waiting 5 seconds for slapd to start..."
	sleep 5
done

if test $RC != 0 ; then
	echo "ldapsearch failed ($RC)!"
	test $KILLSERVERS != no && kill -HUP $KILLPIDS
	exit $RC
fi

echo "Using ldapadd to create the context prefix entry in the provider..."
$LDAPADD -D "$MANAGERDN" -H $URI1 -w $PASSWD < \
	$LDIFORDEREDCP > /dev/null 2>&1
RC=$?
if test $RC != 0 ; then
	echo "ldapadd failed ($RC)!"
	test $KILLSERVERS != no && kill -HUP $KILLPIDS
	exit $RC
fi

echo "Starting R1 consumer slapd on TCP/IP port $PORT2..."
. $CONFFILTER $BACKEND < $R1SRCONSUMERCONF > $CONF2
$SLAPD -f $CONF2 -h $URI2 -d $LVL > $LOG2 2>&1 &
CONSUMERPID=$!
if test $WAIT != 0 ; then
    echo CONSUMER R1 PID $CONSUMERPID
    read foo
fi
KILLPIDS="$KILLPIDS $CONSUMERPID"

sleep 1

echo "Using ldapsearch to check that R1 consumer slapd (pid=$CONSUMERPID) is running..."
for i in 0 1 2 3 4 5; do
	$LDAPSEARCH -s base -b "$MONITOR" -H $URI2 \
		'objectclass=*' > /dev/null 2>&1
	RC=$?
	if test $RC = 0 ; then
		break
	fi
	echo "Waiting 5 seconds for R1 slapd to start..."
	sleep 5
done

if test $RC != 0 ; then
	echo "ldapsearch failed ($RC)!"
	test $KILLSERVERS != no && kill -HUP $KILLPIDS
	exit $RC
fi

echo "Starting R2 consumer slapd on TCP/IP port $PORT3..."
. $CONFFILTER $BACKEND < $R2SRCONSUMERCONF > $CONF3
$SLAPD -f $CONF3 -h $URI3 -d $LVL > $LOG3 2>&1 &
CONSUMERPID=$!
if test $WAIT != 0 ; then
    echo CONSUMER R2 PID $CONSUMERPID
    read foo
fi
KILLPIDS="$KILLPIDS $CONSUMERPID"

sleep 1

echo "Using ldapsearch to check that R2 consumer slapd (pid=$CONSUMERPID) is running..."
for i in 0 1 2 3 4 5; do
	$LDAPSEARCH -s base -b "$MONITOR" -H $URI3 \
		'objectclass=*' > /dev/null 2>&1
	RC=$?
	if test $RC = 0 ; then
		break
	fi
	echo "Waiting 5 seconds for R2 consumer slapd to start..."
	sleep 5
done

if test $RC != 0 ; then
	echo "ldapsearch failed ($RC)!"
	test $KILLSERVERS != no && kill -HUP $KILLPIDS
	exit $RC
fi

echo "Starting P1 consumer slapd on TCP/IP port $PORT4..."
. $CONFFILTER $BACKEND < $P1SRCONSUMERCONF > $CONF4
$SLAPD -f $CONF4 -h $URI4 -d $LVL > $LOG4 2>&1 &
CONSUMERPID=$!
if test $WAIT != 0 ; then
    echo CONSUMER P1 PID $CONSUMERPID
    read foo
fi
KILLPIDS="$KILLPIDS $CONSUMERPID"

sleep 1

echo "Using ldapsearch to check that P1 consumer slapd (pid=$CONSUMERPID) is running..."
for i in 0 1 2 3 4 5; do
	$LDAPSEARCH -s base -b "$MONITOR" -H $URI4 \
		'objectclass=*' > /dev/null 2>&1
	RC=$?
	if test $RC = 0 ; then
		break
	fi
	echo "Waiting 5 seconds for P1 consumer slapd to start..."
	sleep 5
done

if test $RC != 0 ; then
	echo "ldapsearch failed ($RC)!"
	test $KILLSERVERS != no && kill -HUP $KILLPIDS
	exit $RC
fi

echo "Starting P2 consumer slapd on TCP/IP port $PORT5..."
. $CONFFILTER $BACKEND < $P2SRCONSUMERCONF > $CONF5
$SLAPD -f $CONF5 -h $URI5 -d $LVL > $LOG5 2>&1 &
CONSUMERPID=$!
if test $WAIT != 0 ; then
    echo CONSUMER P2 PID $CONSUMERPID
    read foo
fi
KILLPIDS="$KILLPIDS $CONSUMERPID"

sleep 1

echo "Using ldapsearch to check that P2 consumer slapd (pid=$CONSUMERPID) is running..."
for i in 0 1 2 3 4 5; do
	$LDAPSEARCH -s base -b "$MONITOR" -H $URI5 \
		'objectclass=*' > /dev/null 2>&1
	RC=$?
	if test $RC = 0 ; then
		break
	fi
	echo "Waiting 5 seconds for P2 consumer slapd to start..."
	sleep 5
done

if test $RC != 0 ; then
	echo "ldapsearch failed ($RC)!"
	test $KILLSERVERS != no && kill -HUP $KILLPIDS
	exit $RC
fi

echo "Starting P3 consumer slapd on TCP/IP port $PORT6..."
. $CONFFILTER $BACKEND < $P3SRCONSUMERCONF > $CONF6
$SLAPD -f $CONF6 -h $URI6 -d $LVL > $LOG6 2>&1 &
CONSUMERPID=$!
if test $WAIT != 0 ; then
    echo CONSUMER P3 PID $CONSUMERPID
    read foo
fi
KILLPIDS="$KILLPIDS $CONSUMERPID"

sleep 1

echo "Using ldapsearch to check that P3 consumer slapd (pid=$CONSUMERPID) is running..."
for i in 0 1 2 3 4 5; do
	$LDAPSEARCH -s base -b "$MONITOR" -H $URI6 \
		'objectclass=*' > /dev/null 2>&1
	RC=$?
	if test $RC = 0 ; then
		break
	fi
	echo "Waiting 5 seconds for P3 consumer slapd to start..."
	sleep 5
done

if test $RC != 0 ; then
	echo "ldapsearch failed ($RC)!"
	test $KILLSERVERS != no && kill -HUP $KILLPIDS
	exit $RC
fi

echo "Using ldapadd to populate the provider directory..."
$LDAPADD -D "$MANAGERDN" -H $URI1 -w $PASSWD < \
	$LDIFORDEREDNOCP > /dev/null 2>&1
RC=$?
if test $RC != 0 ; then
	echo "ldapadd failed ($RC)!"
	test $KILLSERVERS != no && kill -HUP $KILLPIDS
	exit $RC
fi

echo "Waiting $SLEEP2 seconds for syncrepl to receive changes..."
sleep $SLEEP2

echo "Using ldapmodify to modify provider directory..."

#
# Do some modifications
#

$LDAPMODIFY -v -D "$MANAGERDN" -H $URI1 -w $PASSWD > \
	$TESTOUT 2>&1 << EOMODS
dn: cn=James A Jones 1, ou=Alumni Association, ou=People, dc=example,dc=com
changetype: modify
add: drink
drink: Orange Juice
-
delete: sn
sn: Jones
-
add: sn
sn: Jones

dn: cn=Bjorn Jensen, ou=Information Technology Division, ou=People, dc=example,dc=com
changetype: modify
replace: drink
drink: Iced Tea
drink: Mad Dog 20/20

dn: cn=ITD Staff,ou=Groups,dc=example,dc=com
changetype: modify
delete: uniquemember
uniquemember: cn=James A Jones 2, ou=Information Technology Division, ou=People, dc=example,dc=com
uniquemember: cn=Bjorn Jensen, ou=Information Technology Division, ou=People, dc=example,dc=com
-
add: uniquemember
uniquemember: cn=Dorothy Stevens, ou=Alumni Association, ou=People, dc=example,dc=com
uniquemember: cn=James A Jones 1, ou=Alumni Association, ou=People, dc=example,dc=com

dn: cn=All Staff,ou=Groups,dc=example,dc=com
changetype: modify
delete: description

dn: cn=Gern Jensen, ou=Information Technology Division, ou=People, dc=example,dc=com
changetype: add
objectclass: OpenLDAPperson
cn: Gern Jensen
sn: Jensen
uid: gjensen
title: Chief Investigator, ITD
postaladdress: ITD $ 535 W. William St $ Ann Arbor, MI 48103
seealso: cn=All Staff, ou=Groups, dc=example,dc=com
drink: Coffee
homepostaladdress: 844 Brown St. Apt. 4 $ Ann Arbor, MI 48104
description: Very odd
facsimiletelephonenumber: +1 313 555 7557
telephonenumber: +1 313 555 8343
mail: gjensen@mailgw.example.com
homephone: +1 313 555 8844

dn: ou=Retired, ou=People, dc=example,dc=com
changetype: add
objectclass: organizationalUnit
ou: Retired

dn: cn=Rosco P. Coltrane, ou=Information Technology Division, ou=People, dc=example,dc=com
changetype: add
objectclass: OpenLDAPperson
cn: Rosco P. Coltrane
sn: Coltrane
uid: rosco

dn: cn=Rosco P. Coltrane, ou=Information Technology Division, ou=People, dc=example,dc=com
changetype: modrdn
newrdn: cn=Rosco P. Coltrane
deleteoldrdn: 1
newsuperior: ou=Retired, ou=People, dc=example,dc=com

dn: cn=James A Jones 2, ou=Information Technology Division, ou=People, dc=example,dc=com
changetype: delete

dn: dc=testdomain1,dc=example,dc=com
changetype: modrdn
newrdn: dc=itsdomain1
deleteoldrdn: 1

dn: dc=itsdomain1,dc=example,dc=com
changetype: modify
replace: description
description: Example, Inc. ITS test domain

dn: dc=testdomain2,dc=example,dc=com
changetype: modrdn
newrdn: dc=itsdomain2
deleteoldrdn: 1

EOMODS

RC=$?
if test $RC != 0 ; then
	echo "ldapmodify failed ($RC)!"
	test $KILLSERVERS != no && kill -HUP $KILLPIDS
	exit $RC
fi

echo "Waiting $SLEEP2 seconds for syncrepl to receive changes..."
sleep $SLEEP2

echo "Performing modify alone on provider..."
$LDAPMODIFY -v -D "$MANAGERDN" -H $URI1 -w $PASSWD > \
        $TESTOUT 2>&1 << EOMODS
dn: dc=itsdomain2,dc=example,dc=com
changetype: modify
replace: description
description: Example, Inc. itsdomain2 test domain

EOMODS

RC=$?   
if test $RC != 0 ; then
        echo "ldapmodify failed ($RC)!"
        test $KILLSERVERS != no && kill -HUP $KILLPIDS
        exit $RC
fi      

echo "Waiting $SLEEP2 seconds for syncrepl to receive changes..."
sleep $SLEEP2 

echo "Using ldapsearch to read all the entries from the provider..."
$LDAPSEARCH -S "" -b "$BASEDN" -H $URI1 \
	'(objectClass=*)' '*' entryCSN > $PROVIDEROUT 2>&1
RC=$?

if test $RC != 0 ; then
	echo "ldapsearch failed at provider ($RC)!"
	test $KILLSERVERS != no && kill -HUP $KILLPIDS
	exit $RC
fi

echo "Using ldapsearch to read all the entries from the R1 consumer..."
$LDAPSEARCH -S "" -b "$BASEDN" -H $URI2 \
	'(objectClass=*)' '*' entryCSN > $SERVER2OUT 2>&1
RC=$?

if test $RC != 0 ; then
	echo "ldapsearch failed at R1 consumer ($RC)!"
	test $KILLSERVERS != no && kill -HUP $KILLPIDS
	exit $RC
fi

echo "Using ldapsearch to read all the entries from the R2 consumer..."
$LDAPSEARCH -S "" -b "$BASEDN" -H $URI3 \
	'(objectClass=*)' '*' entryCSN > $SERVER3OUT 2>&1
RC=$?

if test $RC != 0 ; then
	echo "ldapsearch failed at R2 consumer ($RC)!"
	test $KILLSERVERS != no && kill -HUP $KILLPIDS
	exit $RC
fi

echo "Using ldapsearch to read all the entries from the P1 consumer..."
$LDAPSEARCH -S "" -b "$BASEDN" -H $URI4 \
	'(objectClass=*)' '*' entryCSN > $SERVER4OUT 2>&1
RC=$?

if test $RC != 0 ; then
	echo "ldapsearch failed at P1 consumer ($RC)!"
	test $KILLSERVERS != no && kill -HUP $KILLPIDS
	exit $RC
fi

echo "Using ldapsearch to read all the entries from the P2 consumer..."
$LDAPSEARCH -S "" -b "$BASEDN" -H $URI5 \
	'(objectClass=*)' '*' entryCSN > $SERVER5OUT 2>&1
RC=$?

if test $RC != 0 ; then
	echo "ldapsearch failed at P2 consumer ($RC)!"
	test $KILLSERVERS != no && kill -HUP $KILLPIDS
	exit $RC
fi

echo "Using ldapsearch to read all the entries from the P3 consumer..."
$LDAPSEARCH -S "" -b "$BASEDN" -H $URI6 \
	'(objectClass=*)' '*' entryCSN > $SERVER6OUT 2>&1
RC=$?

if test $RC != 0 ; then
	echo "ldapsearch failed at P3 consumer ($RC)!"
	test $KILLSERVERS != no && kill -HUP $KILLPIDS
	exit $RC
fi

test $KILLSERVERS != no && kill -HUP $KILLPIDS

echo "Filtering provider ldapsearch results..."
$LDIFFILTER < $PROVIDEROUT > $PROVIDERFLT
echo "Filtering R1 consumer ldapsearch results..."
$LDIFFILTER < $SERVER2OUT > $SERVER2FLT
echo "Filtering R2 consumer ldapsearch results..."
$LDIFFILTER < $SERVER3OUT > $SERVER3FLT
echo "Filtering P1 consumer ldapsearch results..."
$LDIFFILTER < $SERVER4OUT > $SERVER4FLT
echo "Filtering P2 consumer ldapsearch results..."
$LDIFFILTER < $SERVER5OUT > $SERVER5FLT
echo "Filtering P3 consumer ldapsearch results..."
$LDIFFILTER < $SERVER6OUT > $SERVER6FLT

echo "Comparing retrieved entries from provider and R1 consumer..."
$CMP $PROVIDERFLT $SERVER2FLT > $CMPOUT

if test $? != 0 ; then
	echo "test failed - provider and R1 consumer databases differ"
	exit 1
fi

echo "Comparing retrieved entries from provider and R2 consumer..."
$CMP $PROVIDERFLT $SERVER3FLT > $CMPOUT

if test $? != 0 ; then
	echo "test failed - provider and R2 consumer databases differ"
	exit 1
fi

echo "Comparing retrieved entries from provider and P1 consumer..."
$CMP $PROVIDERFLT $SERVER4FLT > $CMPOUT

if test $? != 0 ; then
	echo "test failed - provider and P1 consumer databases differ"
	exit 1
fi

echo "Comparing retrieved entries from provider and P2 consumer..."
$CMP $PROVIDERFLT $SERVER5FLT > $CMPOUT

if test $? != 0 ; then
	echo "test failed - provider and P2 consumer databases differ"
	exit 1
fi

echo "Comparing retrieved entries from provider and P3 consumer..."
$CMP $PROVIDERFLT $SERVER6FLT > $CMPOUT

if test $? != 0 ; then
	echo "test failed - provider and P3 consumer databases differ"
	exit 1
fi

echo ">>>>> Test succeeded"

test $KILLSERVERS != no && wait

exit 0
