# Copyright 2014-2024 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
load_lib dwarf.exp

# This test can only be run on targets which support DWARF-2 and use gas.
require dwarf2_support

standard_testfile main.c -dw.S

# Make some DWARF for the test.
set asm_file [standard_output_file $srcfile2]
Dwarf::assemble $asm_file {
    global srcfile

    cu {} {
	DW_TAG_compile_unit {
                {DW_AT_language @DW_LANG_C}
                {DW_AT_name     $srcfile}
                {DW_AT_comp_dir /tmp}
        } {
	    declare_labels integer_label uinteger_label

            integer_label: DW_TAG_base_type {
                {DW_AT_byte_size 4 DW_FORM_sdata}
                {DW_AT_encoding  @DW_ATE_signed}
                {DW_AT_name      int}
            }

            uinteger_label: DW_TAG_base_type {
                {DW_AT_byte_size 4 DW_FORM_sdata}
                {DW_AT_encoding  @DW_ATE_unsigned}
		{DW_AT_name      {unsigned int}}
            }

	    DW_TAG_enumeration_type {
		{DW_AT_name E}
		{DW_AT_type :$integer_label}
	    } {
		DW_TAG_enumerator {
		    {DW_AT_name ONE}
		    {DW_AT_const_value 1 DW_FORM_sdata}
		}
	    }

	    DW_TAG_enumeration_type {
		{DW_AT_name EU}
		{DW_AT_type :$uinteger_label}
	    } {
		DW_TAG_enumerator {
		    {DW_AT_name TWO}
		    {DW_AT_const_value 2 DW_FORM_sdata}
		}
	    }
	}
    }

    cu {} {
	DW_TAG_compile_unit {
		{DW_AT_language @DW_LANG_C_plus_plus}
		{DW_AT_name	tmp.c}
		{DW_AT_comp_dir /tmp}
	} {
	    declare_labels integer_label forward

	    integer_label: DW_TAG_base_type {
		{DW_AT_byte_size 4 DW_FORM_sdata}
		{DW_AT_encoding	 @DW_ATE_signed}
		{DW_AT_name	 int}
	    }

	    DW_TAG_enumeration_type {
		{DW_AT_specification :$forward}
	    } {
		DW_TAG_enumerator {
		    {DW_AT_name val1}
		    {DW_AT_const_value 1 DW_FORM_sdata}
		}
	    }

	    DW_TAG_namespace {
		{DW_AT_name ns}
	    } {
		forward: DW_TAG_enumeration_type {
		    {DW_AT_name e}
		    {DW_AT_type :$integer_label}
		    {DW_AT_declaration 1 flag}
		}
	    }
	}
    }
}

if { [prepare_for_testing "failed to prepare" ${testfile} \
	  [list $srcfile $asm_file] {nodebug}] } {
    return -1
}

gdb_test "print sizeof(enum E)" " = 4"

gdb_test "ptype enum EU" "type = enum EU {TWO = 2}" \
    "ptype EU in enum C"
gdb_test_no_output "set lang c++"
gdb_test "ptype enum EU" "type = enum EU : unsigned int {TWO = 2}" \
    "ptype EU in C++"

gdb_test "p ns::val1" \
    " = ns::val1"

require !readnow
require {string equal [have_index $binfile] ""}

set re_ws "\[ \t\]"

gdb_test_lines "maint print objfiles" \
    "val1 has a parent" \
    [multi_line \
	 "" \
	 "$re_ws+qualified:$re_ws+ns::val1" \
	 ".*"]
