# This testcase is part of GDB, the GNU debugger.

# Copyright 2005-2024 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# Test the basic functionality of gdbserver.

load_lib gdbserver-support.exp

standard_testfile server.c

require allow_gdbserver_tests

if {[build_executable $testfile.exp $testfile $srcfile debug] == -1} {
    return -1
}

save_vars { GDBFLAGS } {
    # If GDB and GDBserver are both running locally, set the sysroot to avoid
    # reading files via the remote protocol.
    if { ![is_remote host] && ![is_remote target] } {
	set GDBFLAGS "$GDBFLAGS -ex \"set sysroot\""
    }

    clean_restart $binfile
}

# Make sure we're disconnected, in case we're testing with an
# extended-remote board, therefore already connected.
gdb_test "disconnect" ".*"

gdbserver_run ""

# We are now stopped at the program's entry point.  On targets which use
# SVR4 dynamic linking, we should have automatically loaded symbols for
# the dynamic linker.
if { [istarget *-*-linux*] } {
    gdb_test "info shared" "From.*To.*" "loaded dynamic linker"
}

gdb_breakpoint main
gdb_test "continue" "Breakpoint.* main .*" "continue to main"

if { [istarget "aarch64*-*-*"]
     || [istarget "arm*-*-*"]
     || [istarget "csky*-*-*"]
     || [istarget "loongarch*-*-*"]
     || [istarget "riscv*-*-*"] } {
    set pc_regname "pc"
} elseif { [is_amd64_regs_target] } {
    set pc_regname "rip"
} elseif { [is_x86_like_target] } {
    set pc_regname "eip"
} elseif { [istarget "tic6x-*-*"] } {
    set pc_regname "PC"
}

# Sending the PC register in advance is good practice.  Test that this is
# actually done for the targets where gdbserver is supposed to.
set expedited_pc_test_name "send PC as expedited register in stop reply"
if { [info exists pc_regname] } {
    set seen_line false
    gdb_test_multiple "maintenance print remote-registers" \
	     $expedited_pc_test_name -lbl {
	-re "${pc_regname}\[\[:space:\]\]+${decimal}.*${decimal}\[\[:space:\]\]+yes" {
	    set seen_line true
	    exp_continue
	}
	-re "\r\n$gdb_prompt $" {
	    gdb_assert { $seen_line } $gdb_test_name
	}
    }
} else {
    untested $expedited_pc_test_name
}
